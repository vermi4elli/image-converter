// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace scene_format {
constexpr Scene::Scene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scene_objects_()
  , lights_()
  , cameras_()
  , materials_()
  , render_options_(nullptr)
  , version_(0){}
struct SceneDefaultTypeInternal {
  constexpr SceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SceneDefaultTypeInternal() {}
  union {
    Scene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SceneDefaultTypeInternal _Scene_default_instance_;
constexpr Vector3::Vector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DefaultTypeInternal {
  constexpr Vector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DefaultTypeInternal _Vector3_default_instance_;
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
constexpr Transform::Transform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , rotation_(nullptr)
  , scale_(nullptr)
  , parent_id_(0){}
struct TransformDefaultTypeInternal {
  constexpr TransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformDefaultTypeInternal _Transform_default_instance_;
constexpr RenderOptions::RenderOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_properties_()
  , camera_id_(0)
  , width_(0)
  , height_(0){}
struct RenderOptionsDefaultTypeInternal {
  constexpr RenderOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenderOptionsDefaultTypeInternal() {}
  union {
    RenderOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenderOptionsDefaultTypeInternal _RenderOptions_default_instance_;
constexpr Cube::Cube(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(nullptr){}
struct CubeDefaultTypeInternal {
  constexpr CubeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CubeDefaultTypeInternal() {}
  union {
    Cube _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CubeDefaultTypeInternal _Cube_default_instance_;
constexpr Sphere::Sphere(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radius_(0){}
struct SphereDefaultTypeInternal {
  constexpr SphereDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SphereDefaultTypeInternal() {}
  union {
    Sphere _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SphereDefaultTypeInternal _Sphere_default_instance_;
constexpr Plane::Plane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PlaneDefaultTypeInternal {
  constexpr PlaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaneDefaultTypeInternal() {}
  union {
    Plane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaneDefaultTypeInternal _Plane_default_instance_;
constexpr Disk::Disk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radius_(0){}
struct DiskDefaultTypeInternal {
  constexpr DiskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskDefaultTypeInternal() {}
  union {
    Disk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskDefaultTypeInternal _Disk_default_instance_;
constexpr MeshedObject::MeshedObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MeshedObjectDefaultTypeInternal {
  constexpr MeshedObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeshedObjectDefaultTypeInternal() {}
  union {
    MeshedObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeshedObjectDefaultTypeInternal _MeshedObject_default_instance_;
constexpr SceneObject::SceneObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , id_(0)
  , _oneof_case_{}{}
struct SceneObjectDefaultTypeInternal {
  constexpr SceneObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SceneObjectDefaultTypeInternal() {}
  union {
    SceneObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SceneObjectDefaultTypeInternal _SceneObject_default_instance_;
constexpr LightDirectional::LightDirectional(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LightDirectionalDefaultTypeInternal {
  constexpr LightDirectionalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LightDirectionalDefaultTypeInternal() {}
  union {
    LightDirectional _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LightDirectionalDefaultTypeInternal _LightDirectional_default_instance_;
constexpr LightPoint::LightPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LightPointDefaultTypeInternal {
  constexpr LightPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LightPointDefaultTypeInternal() {}
  union {
    LightPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LightPointDefaultTypeInternal _LightPoint_default_instance_;
constexpr LightEnvironment::LightEnvironment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LightEnvironmentDefaultTypeInternal {
  constexpr LightEnvironmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LightEnvironmentDefaultTypeInternal() {}
  union {
    LightEnvironment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LightEnvironmentDefaultTypeInternal _LightEnvironment_default_instance_;
constexpr LightSphere::LightSphere(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radius_(0){}
struct LightSphereDefaultTypeInternal {
  constexpr LightSphereDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LightSphereDefaultTypeInternal() {}
  union {
    LightSphere _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LightSphereDefaultTypeInternal _LightSphere_default_instance_;
constexpr Light::Light(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , color_(nullptr)
  , id_(0)
  , _oneof_case_{}{}
struct LightDefaultTypeInternal {
  constexpr LightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LightDefaultTypeInternal() {}
  union {
    Light _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LightDefaultTypeInternal _Light_default_instance_;
constexpr PerspectiveCamera::PerspectiveCamera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fov_(0){}
struct PerspectiveCameraDefaultTypeInternal {
  constexpr PerspectiveCameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerspectiveCameraDefaultTypeInternal() {}
  union {
    PerspectiveCamera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerspectiveCameraDefaultTypeInternal _PerspectiveCamera_default_instance_;
constexpr OrthographicCamera::OrthographicCamera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OrthographicCameraDefaultTypeInternal {
  constexpr OrthographicCameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrthographicCameraDefaultTypeInternal() {}
  union {
    OrthographicCamera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrthographicCameraDefaultTypeInternal _OrthographicCamera_default_instance_;
constexpr Camera::Camera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , id_(0)
  , _oneof_case_{}{}
struct CameraDefaultTypeInternal {
  constexpr CameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDefaultTypeInternal _Camera_default_instance_;
constexpr Material::Material(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct MaterialDefaultTypeInternal {
  constexpr MaterialDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaterialDefaultTypeInternal() {}
  union {
    Material _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaterialDefaultTypeInternal _Material_default_instance_;
constexpr LambertReflectionMaterial::LambertReflectionMaterial(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr){}
struct LambertReflectionMaterialDefaultTypeInternal {
  constexpr LambertReflectionMaterialDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LambertReflectionMaterialDefaultTypeInternal() {}
  union {
    LambertReflectionMaterial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LambertReflectionMaterialDefaultTypeInternal _LambertReflectionMaterial_default_instance_;
constexpr SpecularReflectionMaterial::SpecularReflectionMaterial(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eta_(0){}
struct SpecularReflectionMaterialDefaultTypeInternal {
  constexpr SpecularReflectionMaterialDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecularReflectionMaterialDefaultTypeInternal() {}
  union {
    SpecularReflectionMaterial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecularReflectionMaterialDefaultTypeInternal _SpecularReflectionMaterial_default_instance_;
constexpr CustomProperty::CustomProperty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct CustomPropertyDefaultTypeInternal {
  constexpr CustomPropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomPropertyDefaultTypeInternal() {}
  union {
    CustomProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomPropertyDefaultTypeInternal _CustomProperty_default_instance_;
}  // namespace scene_format
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scene_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scene_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, version_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, render_options_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, scene_objects_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, lights_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, cameras_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Scene, materials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Color, r_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Color, g_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Color, b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Transform, position_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Transform, rotation_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Transform, scale_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Transform, parent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::RenderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::RenderOptions, camera_id_),
  PROTOBUF_FIELD_OFFSET(::scene_format::RenderOptions, width_),
  PROTOBUF_FIELD_OFFSET(::scene_format::RenderOptions, height_),
  PROTOBUF_FIELD_OFFSET(::scene_format::RenderOptions, custom_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Cube, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Cube, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Sphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Sphere, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Plane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Disk, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::MeshedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::MeshedObject, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::SceneObject, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::scene_format::SceneObject, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::SceneObject, id_),
  PROTOBUF_FIELD_OFFSET(::scene_format::SceneObject, transform_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::scene_format::SceneObject, object_material_),
  PROTOBUF_FIELD_OFFSET(::scene_format::SceneObject, mesh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::LightDirectional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::LightPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::LightEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::LightSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::LightSphere, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::scene_format::Light, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Light, id_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Light, transform_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Light, color_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::scene_format::Light, light_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::PerspectiveCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::PerspectiveCamera, fov_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::OrthographicCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::scene_format::Camera, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Camera, id_),
  PROTOBUF_FIELD_OFFSET(::scene_format::Camera, transform_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::scene_format::Camera, camera_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::Material, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::scene_format::Material, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::Material, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::scene_format::Material, material_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::LambertReflectionMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::LambertReflectionMaterial, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::SpecularReflectionMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::SpecularReflectionMaterial, eta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::scene_format::CustomProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::scene_format::CustomProperty, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scene_format::CustomProperty, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::scene_format::CustomProperty, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::scene_format::Scene)},
  { 11, -1, sizeof(::scene_format::Vector3)},
  { 19, -1, sizeof(::scene_format::Color)},
  { 27, -1, sizeof(::scene_format::Transform)},
  { 36, -1, sizeof(::scene_format::RenderOptions)},
  { 45, -1, sizeof(::scene_format::Cube)},
  { 51, -1, sizeof(::scene_format::Sphere)},
  { 57, -1, sizeof(::scene_format::Plane)},
  { 62, -1, sizeof(::scene_format::Disk)},
  { 68, -1, sizeof(::scene_format::MeshedObject)},
  { 74, -1, sizeof(::scene_format::SceneObject)},
  { 90, -1, sizeof(::scene_format::LightDirectional)},
  { 95, -1, sizeof(::scene_format::LightPoint)},
  { 100, -1, sizeof(::scene_format::LightEnvironment)},
  { 105, -1, sizeof(::scene_format::LightSphere)},
  { 111, -1, sizeof(::scene_format::Light)},
  { 124, -1, sizeof(::scene_format::PerspectiveCamera)},
  { 130, -1, sizeof(::scene_format::OrthographicCamera)},
  { 135, -1, sizeof(::scene_format::Camera)},
  { 145, -1, sizeof(::scene_format::Material)},
  { 154, -1, sizeof(::scene_format::LambertReflectionMaterial)},
  { 160, -1, sizeof(::scene_format::SpecularReflectionMaterial)},
  { 166, -1, sizeof(::scene_format::CustomProperty)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Scene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_RenderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Cube_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Sphere_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Plane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Disk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_MeshedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_SceneObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_LightDirectional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_LightPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_LightEnvironment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_LightSphere_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Light_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_PerspectiveCamera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_OrthographicCamera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_Material_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_LambertReflectionMaterial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_SpecularReflectionMaterial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::scene_format::_CustomProperty_default_instance_),
};

const char descriptor_table_protodef_scene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013scene.proto\022\014scene_format\"\366\001\n\005Scene\022\017\n"
  "\007version\030\001 \001(\005\0223\n\016render_options\030\002 \001(\0132\033"
  ".scene_format.RenderOptions\0220\n\rscene_obj"
  "ects\030\003 \003(\0132\031.scene_format.SceneObject\022#\n"
  "\006lights\030\004 \003(\0132\023.scene_format.Light\022%\n\007ca"
  "meras\030\005 \003(\0132\024.scene_format.Camera\022)\n\tmat"
  "erials\030\006 \003(\0132\026.scene_format.Material\"*\n\007"
  "Vector3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  "\"(\n\005Color\022\t\n\001r\030\001 \001(\001\022\t\n\001g\030\002 \001(\001\022\t\n\001b\030\003 \001"
  "(\001\"\226\001\n\tTransform\022\'\n\010position\030\002 \001(\0132\025.sce"
  "ne_format.Vector3\022\'\n\010rotation\030\003 \001(\0132\025.sc"
  "ene_format.Vector3\022$\n\005scale\030\004 \001(\0132\025.scen"
  "e_format.Vector3\022\021\n\tparent_id\030\005 \001(\005\"z\n\rR"
  "enderOptions\022\021\n\tcamera_id\030\001 \001(\005\022\r\n\005width"
  "\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\0227\n\021custom_propert"
  "ies\030\004 \003(\0132\034.scene_format.CustomProperty\""
  "+\n\004Cube\022#\n\004size\030\001 \001(\0132\025.scene_format.Vec"
  "tor3\"\030\n\006Sphere\022\016\n\006radius\030\001 \001(\001\"\007\n\005Plane\""
  "\026\n\004Disk\022\016\n\006radius\030\001 \001(\001\"!\n\014MeshedObject\022"
  "\021\n\treference\030\002 \001(\t\"\356\002\n\013SceneObject\022\n\n\002id"
  "\030\001 \001(\005\022*\n\ttransform\030\002 \001(\0132\027.scene_format"
  ".Transform\022\025\n\013material_id\030\003 \001(\tH\000\022*\n\010mat"
  "erial\030\004 \001(\0132\026.scene_format.MaterialH\000\022&\n"
  "\006sphere\030\005 \001(\0132\024.scene_format.SphereH\001\022\"\n"
  "\004cube\030\006 \001(\0132\022.scene_format.CubeH\001\022$\n\005pla"
  "ne\030\007 \001(\0132\023.scene_format.PlaneH\001\022\"\n\004disk\030"
  "\010 \001(\0132\022.scene_format.DiskH\001\0223\n\rmeshed_ob"
  "ject\030\t \001(\0132\032.scene_format.MeshedObjectH\001"
  "B\021\n\017object_materialB\006\n\004mesh\"\022\n\020LightDire"
  "ctional\"\014\n\nLightPoint\"\022\n\020LightEnvironmen"
  "t\"\035\n\013LightSphere\022\016\n\006radius\030\001 \001(\001\"\262\002\n\005Lig"
  "ht\022\n\n\002id\030\001 \001(\005\022*\n\ttransform\030\003 \001(\0132\027.scen"
  "e_format.Transform\022\"\n\005color\030\004 \001(\0132\023.scen"
  "e_format.Color\022)\n\005point\030\005 \001(\0132\030.scene_fo"
  "rmat.LightPointH\000\0225\n\013directional\030\006 \001(\0132\036"
  ".scene_format.LightDirectionalH\000\022+\n\006sphe"
  "re\030\007 \001(\0132\031.scene_format.LightSphereH\000\0225\n"
  "\013environment\030\010 \001(\0132\036.scene_format.LightE"
  "nvironmentH\000B\007\n\005light\" \n\021PerspectiveCame"
  "ra\022\013\n\003fov\030\001 \001(\001\"\024\n\022OrthographicCamera\"\274\001"
  "\n\006Camera\022\n\n\002id\030\001 \001(\005\022*\n\ttransform\030\002 \001(\0132"
  "\027.scene_format.Transform\0226\n\013perspective\030"
  "\003 \001(\0132\037.scene_format.PerspectiveCameraH\000"
  "\0228\n\014orthographic\030\004 \001(\0132 .scene_format.Or"
  "thographicCameraH\000B\010\n\006camera\"\262\001\n\010Materia"
  "l\022\n\n\002id\030\001 \001(\t\022E\n\022lambert_reflection\030\002 \001("
  "\0132\'.scene_format.LambertReflectionMateri"
  "alH\000\022G\n\023specular_reflection\030\003 \001(\0132(.scen"
  "e_format.SpecularReflectionMaterialH\000B\n\n"
  "\010material\"\?\n\031LambertReflectionMaterial\022\""
  "\n\005color\030\001 \001(\0132\023.scene_format.Color\")\n\032Sp"
  "ecularReflectionMaterial\022\013\n\003eta\030\001 \001(\001\"S\n"
  "\016CustomProperty\022\013\n\003key\030\001 \001(\t\022\024\n\ntext_val"
  "ue\030\002 \001(\tH\000\022\025\n\013int32_value\030\003 \001(\005H\000B\007\n\005val"
  "ueB<\n-com.github.computergraphicscourse."
  "sceneformatB\013SceneFormatb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto = {
  false, false, 2232, descriptor_table_protodef_scene_2eproto, "scene.proto", 
  &descriptor_table_scene_2eproto_once, nullptr, 0, 23,
  schemas, file_default_instances, TableStruct_scene_2eproto::offsets,
  file_level_metadata_scene_2eproto, file_level_enum_descriptors_scene_2eproto, file_level_service_descriptors_scene_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_scene_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return descriptor_table_scene_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scene_2eproto(&descriptor_table_scene_2eproto);
namespace scene_format {

// ===================================================================

class Scene::_Internal {
 public:
  static const ::scene_format::RenderOptions& render_options(const Scene* msg);
};

const ::scene_format::RenderOptions&
Scene::_Internal::render_options(const Scene* msg) {
  return *msg->render_options_;
}
Scene::Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scene_objects_(arena),
  lights_(arena),
  cameras_(arena),
  materials_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Scene)
}
Scene::Scene(const Scene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scene_objects_(from.scene_objects_),
      lights_(from.lights_),
      cameras_(from.cameras_),
      materials_(from.materials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_render_options()) {
    render_options_ = new ::scene_format::RenderOptions(*from.render_options_);
  } else {
    render_options_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:scene_format.Scene)
}

void Scene::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&render_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&render_options_)) + sizeof(version_));
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:scene_format.Scene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete render_options_;
}

void Scene::ArenaDtor(void* object) {
  Scene* _this = reinterpret_cast< Scene* >(object);
  (void)_this;
}
void Scene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_objects_.Clear();
  lights_.Clear();
  cameras_.Clear();
  materials_.Clear();
  if (GetArena() == nullptr && render_options_ != nullptr) {
    delete render_options_;
  }
  render_options_ = nullptr;
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.RenderOptions render_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .scene_format.SceneObject scene_objects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scene_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .scene_format.Light lights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .scene_format.Camera cameras = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cameras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .scene_format.Material materials = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // .scene_format.RenderOptions render_options = 2;
  if (this->has_render_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::render_options(this), target, stream);
  }

  // repeated .scene_format.SceneObject scene_objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scene_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_scene_objects(i), target, stream);
  }

  // repeated .scene_format.Light lights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lights(i), target, stream);
  }

  // repeated .scene_format.Camera cameras = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cameras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_cameras(i), target, stream);
  }

  // repeated .scene_format.Material materials = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materials_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_materials(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Scene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .scene_format.SceneObject scene_objects = 3;
  total_size += 1UL * this->_internal_scene_objects_size();
  for (const auto& msg : this->scene_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .scene_format.Light lights = 4;
  total_size += 1UL * this->_internal_lights_size();
  for (const auto& msg : this->lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .scene_format.Camera cameras = 5;
  total_size += 1UL * this->_internal_cameras_size();
  for (const auto& msg : this->cameras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .scene_format.Material materials = 6;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .scene_format.RenderOptions render_options = 2;
  if (this->has_render_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *render_options_);
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Scene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scene_objects_.MergeFrom(from.scene_objects_);
  lights_.MergeFrom(from.lights_);
  cameras_.MergeFrom(from.cameras_);
  materials_.MergeFrom(from.materials_);
  if (from.has_render_options()) {
    _internal_mutable_render_options()->::scene_format::RenderOptions::MergeFrom(from._internal_render_options());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Scene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  return true;
}

void Scene::InternalSwap(Scene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scene_objects_.InternalSwap(&other->scene_objects_);
  lights_.InternalSwap(&other->lights_);
  cameras_.InternalSwap(&other->cameras_);
  materials_.InternalSwap(&other->materials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scene, version_)
      + sizeof(Scene::version_)
      - PROTOBUF_FIELD_OFFSET(Scene, render_options_)>(
          reinterpret_cast<char*>(&render_options_),
          reinterpret_cast<char*>(&other->render_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:scene_format.Vector3)
}

void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:scene_format.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:scene_format.Color)
}

void Color::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:scene_format.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r(), target);
  }

  // double g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_g(), target);
  }

  // double b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  // double g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 8;
  }

  // double b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, b_)
      + sizeof(Color::b_)
      - PROTOBUF_FIELD_OFFSET(Color, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transform::_Internal {
 public:
  static const ::scene_format::Vector3& position(const Transform* msg);
  static const ::scene_format::Vector3& rotation(const Transform* msg);
  static const ::scene_format::Vector3& scale(const Transform* msg);
};

const ::scene_format::Vector3&
Transform::_Internal::position(const Transform* msg) {
  return *msg->position_;
}
const ::scene_format::Vector3&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
const ::scene_format::Vector3&
Transform::_Internal::scale(const Transform* msg) {
  return *msg->scale_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::scene_format::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::scene_format::Vector3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::scene_format::Vector3(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  parent_id_ = from.parent_id_;
  // @@protoc_insertion_point(copy_constructor:scene_format.Transform)
}

void Transform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&position_)) + sizeof(parent_id_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:scene_format.Transform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete scale_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  parent_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .scene_format.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Vector3 scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .scene_format.Vector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .scene_format.Vector3 rotation = 3;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  // .scene_format.Vector3 scale = 4;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scale(this), target, stream);
  }

  // int32 parent_id = 5;
  if (this->parent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_parent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .scene_format.Vector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .scene_format.Vector3 rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .scene_format.Vector3 scale = 4;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // int32 parent_id = 5;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::scene_format::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::scene_format::Vector3::MergeFrom(from._internal_rotation());
  }
  if (from.has_scale()) {
    _internal_mutable_scale()->::scene_format::Vector3::MergeFrom(from._internal_scale());
  }
  if (from.parent_id() != 0) {
    _internal_set_parent_id(from._internal_parent_id());
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, parent_id_)
      + sizeof(Transform::parent_id_)
      - PROTOBUF_FIELD_OFFSET(Transform, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RenderOptions::_Internal {
 public:
};

RenderOptions::RenderOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  custom_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.RenderOptions)
}
RenderOptions::RenderOptions(const RenderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      custom_properties_(from.custom_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:scene_format.RenderOptions)
}

void RenderOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&camera_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(height_));
}

RenderOptions::~RenderOptions() {
  // @@protoc_insertion_point(destructor:scene_format.RenderOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenderOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RenderOptions::ArenaDtor(void* object) {
  RenderOptions* _this = reinterpret_cast< RenderOptions* >(object);
  (void)_this;
}
void RenderOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.RenderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_properties_.Clear();
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .scene_format.CustomProperty custom_properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.RenderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // repeated .scene_format.CustomProperty custom_properties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_custom_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.RenderOptions)
  return target;
}

size_t RenderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.RenderOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .scene_format.CustomProperty custom_properties = 4;
  total_size += 1UL * this->_internal_custom_properties_size();
  for (const auto& msg : this->custom_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.RenderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.RenderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.RenderOptions)
    MergeFrom(*source);
  }
}

void RenderOptions::MergeFrom(const RenderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.RenderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_properties_.MergeFrom(from.custom_properties_);
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void RenderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.RenderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderOptions::CopyFrom(const RenderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.RenderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderOptions::IsInitialized() const {
  return true;
}

void RenderOptions::InternalSwap(RenderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  custom_properties_.InternalSwap(&other->custom_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderOptions, height_)
      + sizeof(RenderOptions::height_)
      - PROTOBUF_FIELD_OFFSET(RenderOptions, camera_id_)>(
          reinterpret_cast<char*>(&camera_id_),
          reinterpret_cast<char*>(&other->camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Cube::_Internal {
 public:
  static const ::scene_format::Vector3& size(const Cube* msg);
};

const ::scene_format::Vector3&
Cube::_Internal::size(const Cube* msg) {
  return *msg->size_;
}
Cube::Cube(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Cube)
}
Cube::Cube(const Cube& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::scene_format::Vector3(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.Cube)
}

void Cube::SharedCtor() {
size_ = nullptr;
}

Cube::~Cube() {
  // @@protoc_insertion_point(destructor:scene_format.Cube)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cube::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void Cube::ArenaDtor(void* object) {
  Cube* _this = reinterpret_cast< Cube* >(object);
  (void)_this;
}
void Cube::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cube::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cube::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Cube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cube::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .scene_format.Vector3 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cube::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Cube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .scene_format.Vector3 size = 1;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Cube)
  return target;
}

size_t Cube::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Cube)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .scene_format.Vector3 size = 1;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cube::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Cube)
  GOOGLE_DCHECK_NE(&from, this);
  const Cube* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cube>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Cube)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Cube)
    MergeFrom(*source);
  }
}

void Cube::MergeFrom(const Cube& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Cube)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    _internal_mutable_size()->::scene_format::Vector3::MergeFrom(from._internal_size());
  }
}

void Cube::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Cube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cube::CopyFrom(const Cube& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Cube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cube::IsInitialized() const {
  return true;
}

void Cube::InternalSwap(Cube* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cube::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sphere::_Internal {
 public:
};

Sphere::Sphere(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Sphere)
}
Sphere::Sphere(const Sphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:scene_format.Sphere)
}

void Sphere::SharedCtor() {
radius_ = 0;
}

Sphere::~Sphere() {
  // @@protoc_insertion_point(destructor:scene_format.Sphere)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sphere::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Sphere::ArenaDtor(void* object) {
  Sphere* _this = reinterpret_cast< Sphere* >(object);
  (void)_this;
}
void Sphere::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sphere::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Sphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sphere::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sphere::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Sphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Sphere)
  return target;
}

size_t Sphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Sphere)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  const Sphere* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sphere>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Sphere)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Sphere)
    MergeFrom(*source);
  }
}

void Sphere::MergeFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void Sphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sphere::CopyFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sphere::IsInitialized() const {
  return true;
}

void Sphere::InternalSwap(Sphere* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sphere::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Plane::_Internal {
 public:
};

Plane::Plane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Plane)
}
Plane::Plane(const Plane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:scene_format.Plane)
}

void Plane::SharedCtor() {
}

Plane::~Plane() {
  // @@protoc_insertion_point(destructor:scene_format.Plane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Plane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Plane::ArenaDtor(void* object) {
  Plane* _this = reinterpret_cast< Plane* >(object);
  (void)_this;
}
void Plane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Plane::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Plane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Plane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Plane)
  return target;
}

size_t Plane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Plane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  const Plane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Plane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Plane)
    MergeFrom(*source);
  }
}

void Plane::MergeFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Plane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plane::CopyFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plane::IsInitialized() const {
  return true;
}

void Plane::InternalSwap(Plane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Disk::_Internal {
 public:
};

Disk::Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Disk)
}
Disk::Disk(const Disk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:scene_format.Disk)
}

void Disk::SharedCtor() {
radius_ = 0;
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:scene_format.Disk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Disk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Disk::ArenaDtor(void* object) {
  Disk* _this = reinterpret_cast< Disk* >(object);
  (void)_this;
}
void Disk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Disk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Disk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Disk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Disk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Disk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Disk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Disk)
  GOOGLE_DCHECK_NE(&from, this);
  const Disk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Disk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Disk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Disk)
    MergeFrom(*source);
  }
}

void Disk::MergeFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Disk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void Disk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disk::IsInitialized() const {
  return true;
}

void Disk::InternalSwap(Disk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Disk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MeshedObject::_Internal {
 public:
};

MeshedObject::MeshedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.MeshedObject)
}
MeshedObject::MeshedObject(const MeshedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.MeshedObject)
}

void MeshedObject::SharedCtor() {
reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MeshedObject::~MeshedObject() {
  // @@protoc_insertion_point(destructor:scene_format.MeshedObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshedObject::ArenaDtor(void* object) {
  MeshedObject* _this = reinterpret_cast< MeshedObject* >(object);
  (void)_this;
}
void MeshedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeshedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.MeshedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "scene_format.MeshedObject.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.MeshedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "scene_format.MeshedObject.reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.MeshedObject)
  return target;
}

size_t MeshedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.MeshedObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 2;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.MeshedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.MeshedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.MeshedObject)
    MergeFrom(*source);
  }
}

void MeshedObject::MergeFrom(const MeshedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.MeshedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void MeshedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.MeshedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshedObject::CopyFrom(const MeshedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.MeshedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshedObject::IsInitialized() const {
  return true;
}

void MeshedObject::InternalSwap(MeshedObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SceneObject::_Internal {
 public:
  static const ::scene_format::Transform& transform(const SceneObject* msg);
  static const ::scene_format::Material& material(const SceneObject* msg);
  static const ::scene_format::Sphere& sphere(const SceneObject* msg);
  static const ::scene_format::Cube& cube(const SceneObject* msg);
  static const ::scene_format::Plane& plane(const SceneObject* msg);
  static const ::scene_format::Disk& disk(const SceneObject* msg);
  static const ::scene_format::MeshedObject& meshed_object(const SceneObject* msg);
};

const ::scene_format::Transform&
SceneObject::_Internal::transform(const SceneObject* msg) {
  return *msg->transform_;
}
const ::scene_format::Material&
SceneObject::_Internal::material(const SceneObject* msg) {
  return *msg->object_material_.material_;
}
const ::scene_format::Sphere&
SceneObject::_Internal::sphere(const SceneObject* msg) {
  return *msg->mesh_.sphere_;
}
const ::scene_format::Cube&
SceneObject::_Internal::cube(const SceneObject* msg) {
  return *msg->mesh_.cube_;
}
const ::scene_format::Plane&
SceneObject::_Internal::plane(const SceneObject* msg) {
  return *msg->mesh_.plane_;
}
const ::scene_format::Disk&
SceneObject::_Internal::disk(const SceneObject* msg) {
  return *msg->mesh_.disk_;
}
const ::scene_format::MeshedObject&
SceneObject::_Internal::meshed_object(const SceneObject* msg) {
  return *msg->mesh_.meshed_object_;
}
void SceneObject::set_allocated_material(::scene_format::Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_object_material();
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(material);
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    set_has_material();
    object_material_.material_ = material;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.SceneObject.material)
}
void SceneObject::set_allocated_sphere(::scene_format::Sphere* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mesh();
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sphere);
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    mesh_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.SceneObject.sphere)
}
void SceneObject::set_allocated_cube(::scene_format::Cube* cube) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mesh();
  if (cube) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cube);
    if (message_arena != submessage_arena) {
      cube = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cube, submessage_arena);
    }
    set_has_cube();
    mesh_.cube_ = cube;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.SceneObject.cube)
}
void SceneObject::set_allocated_plane(::scene_format::Plane* plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mesh();
  if (plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plane);
    if (message_arena != submessage_arena) {
      plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane, submessage_arena);
    }
    set_has_plane();
    mesh_.plane_ = plane;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.SceneObject.plane)
}
void SceneObject::set_allocated_disk(::scene_format::Disk* disk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mesh();
  if (disk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(disk);
    if (message_arena != submessage_arena) {
      disk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disk, submessage_arena);
    }
    set_has_disk();
    mesh_.disk_ = disk;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.SceneObject.disk)
}
void SceneObject::set_allocated_meshed_object(::scene_format::MeshedObject* meshed_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mesh();
  if (meshed_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meshed_object);
    if (message_arena != submessage_arena) {
      meshed_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meshed_object, submessage_arena);
    }
    set_has_meshed_object();
    mesh_.meshed_object_ = meshed_object;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.SceneObject.meshed_object)
}
SceneObject::SceneObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.SceneObject)
}
SceneObject::SceneObject(const SceneObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::scene_format::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  id_ = from.id_;
  clear_has_object_material();
  switch (from.object_material_case()) {
    case kMaterialId: {
      _internal_set_material_id(from._internal_material_id());
      break;
    }
    case kMaterial: {
      _internal_mutable_material()->::scene_format::Material::MergeFrom(from._internal_material());
      break;
    }
    case OBJECT_MATERIAL_NOT_SET: {
      break;
    }
  }
  clear_has_mesh();
  switch (from.mesh_case()) {
    case kSphere: {
      _internal_mutable_sphere()->::scene_format::Sphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kCube: {
      _internal_mutable_cube()->::scene_format::Cube::MergeFrom(from._internal_cube());
      break;
    }
    case kPlane: {
      _internal_mutable_plane()->::scene_format::Plane::MergeFrom(from._internal_plane());
      break;
    }
    case kDisk: {
      _internal_mutable_disk()->::scene_format::Disk::MergeFrom(from._internal_disk());
      break;
    }
    case kMeshedObject: {
      _internal_mutable_meshed_object()->::scene_format::MeshedObject::MergeFrom(from._internal_meshed_object());
      break;
    }
    case MESH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.SceneObject)
}

void SceneObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(id_));
clear_has_object_material();
clear_has_mesh();
}

SceneObject::~SceneObject() {
  // @@protoc_insertion_point(destructor:scene_format.SceneObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
  if (has_object_material()) {
    clear_object_material();
  }
  if (has_mesh()) {
    clear_mesh();
  }
}

void SceneObject::ArenaDtor(void* object) {
  SceneObject* _this = reinterpret_cast< SceneObject* >(object);
  (void)_this;
}
void SceneObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SceneObject::clear_object_material() {
// @@protoc_insertion_point(one_of_clear_start:scene_format.SceneObject)
  switch (object_material_case()) {
    case kMaterialId: {
      object_material_.material_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kMaterial: {
      if (GetArena() == nullptr) {
        delete object_material_.material_;
      }
      break;
    }
    case OBJECT_MATERIAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_MATERIAL_NOT_SET;
}

void SceneObject::clear_mesh() {
// @@protoc_insertion_point(one_of_clear_start:scene_format.SceneObject)
  switch (mesh_case()) {
    case kSphere: {
      if (GetArena() == nullptr) {
        delete mesh_.sphere_;
      }
      break;
    }
    case kCube: {
      if (GetArena() == nullptr) {
        delete mesh_.cube_;
      }
      break;
    }
    case kPlane: {
      if (GetArena() == nullptr) {
        delete mesh_.plane_;
      }
      break;
    }
    case kDisk: {
      if (GetArena() == nullptr) {
        delete mesh_.disk_;
      }
      break;
    }
    case kMeshedObject: {
      if (GetArena() == nullptr) {
        delete mesh_.meshed_object_;
      }
      break;
    }
    case MESH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MESH_NOT_SET;
}


void SceneObject::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.SceneObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  id_ = 0;
  clear_object_material();
  clear_mesh();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string material_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_material_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "scene_format.SceneObject.material_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Material material = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_material(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Sphere sphere = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Cube cube = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cube(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Plane plane = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Disk disk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.MeshedObject meshed_object = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_meshed_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.SceneObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .scene_format.Transform transform = 2;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  // string material_id = 3;
  if (_internal_has_material_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material_id().data(), static_cast<int>(this->_internal_material_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "scene_format.SceneObject.material_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_material_id(), target);
  }

  // .scene_format.Material material = 4;
  if (_internal_has_material()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::material(this), target, stream);
  }

  // .scene_format.Sphere sphere = 5;
  if (_internal_has_sphere()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sphere(this), target, stream);
  }

  // .scene_format.Cube cube = 6;
  if (_internal_has_cube()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cube(this), target, stream);
  }

  // .scene_format.Plane plane = 7;
  if (_internal_has_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::plane(this), target, stream);
  }

  // .scene_format.Disk disk = 8;
  if (_internal_has_disk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::disk(this), target, stream);
  }

  // .scene_format.MeshedObject meshed_object = 9;
  if (_internal_has_meshed_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::meshed_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.SceneObject)
  return target;
}

size_t SceneObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.SceneObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .scene_format.Transform transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  switch (object_material_case()) {
    // string material_id = 3;
    case kMaterialId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_material_id());
      break;
    }
    // .scene_format.Material material = 4;
    case kMaterial: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_material_.material_);
      break;
    }
    case OBJECT_MATERIAL_NOT_SET: {
      break;
    }
  }
  switch (mesh_case()) {
    // .scene_format.Sphere sphere = 5;
    case kSphere: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_.sphere_);
      break;
    }
    // .scene_format.Cube cube = 6;
    case kCube: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_.cube_);
      break;
    }
    // .scene_format.Plane plane = 7;
    case kPlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_.plane_);
      break;
    }
    // .scene_format.Disk disk = 8;
    case kDisk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_.disk_);
      break;
    }
    // .scene_format.MeshedObject meshed_object = 9;
    case kMeshedObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_.meshed_object_);
      break;
    }
    case MESH_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.SceneObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.SceneObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.SceneObject)
    MergeFrom(*source);
  }
}

void SceneObject::MergeFrom(const SceneObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.SceneObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::scene_format::Transform::MergeFrom(from._internal_transform());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.object_material_case()) {
    case kMaterialId: {
      _internal_set_material_id(from._internal_material_id());
      break;
    }
    case kMaterial: {
      _internal_mutable_material()->::scene_format::Material::MergeFrom(from._internal_material());
      break;
    }
    case OBJECT_MATERIAL_NOT_SET: {
      break;
    }
  }
  switch (from.mesh_case()) {
    case kSphere: {
      _internal_mutable_sphere()->::scene_format::Sphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kCube: {
      _internal_mutable_cube()->::scene_format::Cube::MergeFrom(from._internal_cube());
      break;
    }
    case kPlane: {
      _internal_mutable_plane()->::scene_format::Plane::MergeFrom(from._internal_plane());
      break;
    }
    case kDisk: {
      _internal_mutable_disk()->::scene_format::Disk::MergeFrom(from._internal_disk());
      break;
    }
    case kMeshedObject: {
      _internal_mutable_meshed_object()->::scene_format::MeshedObject::MergeFrom(from._internal_meshed_object());
      break;
    }
    case MESH_NOT_SET: {
      break;
    }
  }
}

void SceneObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.SceneObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneObject::CopyFrom(const SceneObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.SceneObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneObject::IsInitialized() const {
  return true;
}

void SceneObject::InternalSwap(SceneObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneObject, id_)
      + sizeof(SceneObject::id_)
      - PROTOBUF_FIELD_OFFSET(SceneObject, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
  swap(object_material_, other->object_material_);
  swap(mesh_, other->mesh_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LightDirectional::_Internal {
 public:
};

LightDirectional::LightDirectional(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.LightDirectional)
}
LightDirectional::LightDirectional(const LightDirectional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:scene_format.LightDirectional)
}

void LightDirectional::SharedCtor() {
}

LightDirectional::~LightDirectional() {
  // @@protoc_insertion_point(destructor:scene_format.LightDirectional)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightDirectional::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightDirectional::ArenaDtor(void* object) {
  LightDirectional* _this = reinterpret_cast< LightDirectional* >(object);
  (void)_this;
}
void LightDirectional::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightDirectional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LightDirectional::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.LightDirectional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightDirectional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightDirectional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.LightDirectional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.LightDirectional)
  return target;
}

size_t LightDirectional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.LightDirectional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightDirectional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.LightDirectional)
  GOOGLE_DCHECK_NE(&from, this);
  const LightDirectional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightDirectional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.LightDirectional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.LightDirectional)
    MergeFrom(*source);
  }
}

void LightDirectional::MergeFrom(const LightDirectional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.LightDirectional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LightDirectional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.LightDirectional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightDirectional::CopyFrom(const LightDirectional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.LightDirectional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightDirectional::IsInitialized() const {
  return true;
}

void LightDirectional::InternalSwap(LightDirectional* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightDirectional::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LightPoint::_Internal {
 public:
};

LightPoint::LightPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.LightPoint)
}
LightPoint::LightPoint(const LightPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:scene_format.LightPoint)
}

void LightPoint::SharedCtor() {
}

LightPoint::~LightPoint() {
  // @@protoc_insertion_point(destructor:scene_format.LightPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightPoint::ArenaDtor(void* object) {
  LightPoint* _this = reinterpret_cast< LightPoint* >(object);
  (void)_this;
}
void LightPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LightPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.LightPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.LightPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.LightPoint)
  return target;
}

size_t LightPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.LightPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.LightPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LightPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.LightPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.LightPoint)
    MergeFrom(*source);
  }
}

void LightPoint::MergeFrom(const LightPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.LightPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LightPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.LightPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightPoint::CopyFrom(const LightPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.LightPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightPoint::IsInitialized() const {
  return true;
}

void LightPoint::InternalSwap(LightPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LightEnvironment::_Internal {
 public:
};

LightEnvironment::LightEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.LightEnvironment)
}
LightEnvironment::LightEnvironment(const LightEnvironment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:scene_format.LightEnvironment)
}

void LightEnvironment::SharedCtor() {
}

LightEnvironment::~LightEnvironment() {
  // @@protoc_insertion_point(destructor:scene_format.LightEnvironment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightEnvironment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightEnvironment::ArenaDtor(void* object) {
  LightEnvironment* _this = reinterpret_cast< LightEnvironment* >(object);
  (void)_this;
}
void LightEnvironment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LightEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.LightEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightEnvironment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightEnvironment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.LightEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.LightEnvironment)
  return target;
}

size_t LightEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.LightEnvironment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightEnvironment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.LightEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const LightEnvironment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.LightEnvironment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.LightEnvironment)
    MergeFrom(*source);
  }
}

void LightEnvironment::MergeFrom(const LightEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.LightEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LightEnvironment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.LightEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightEnvironment::CopyFrom(const LightEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.LightEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightEnvironment::IsInitialized() const {
  return true;
}

void LightEnvironment::InternalSwap(LightEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightEnvironment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LightSphere::_Internal {
 public:
};

LightSphere::LightSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.LightSphere)
}
LightSphere::LightSphere(const LightSphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:scene_format.LightSphere)
}

void LightSphere::SharedCtor() {
radius_ = 0;
}

LightSphere::~LightSphere() {
  // @@protoc_insertion_point(destructor:scene_format.LightSphere)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightSphere::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightSphere::ArenaDtor(void* object) {
  LightSphere* _this = reinterpret_cast< LightSphere* >(object);
  (void)_this;
}
void LightSphere::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightSphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LightSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.LightSphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightSphere::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightSphere::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.LightSphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.LightSphere)
  return target;
}

size_t LightSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.LightSphere)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightSphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.LightSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const LightSphere* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightSphere>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.LightSphere)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.LightSphere)
    MergeFrom(*source);
  }
}

void LightSphere::MergeFrom(const LightSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.LightSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void LightSphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.LightSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSphere::CopyFrom(const LightSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.LightSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSphere::IsInitialized() const {
  return true;
}

void LightSphere::InternalSwap(LightSphere* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightSphere::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Light::_Internal {
 public:
  static const ::scene_format::Transform& transform(const Light* msg);
  static const ::scene_format::Color& color(const Light* msg);
  static const ::scene_format::LightPoint& point(const Light* msg);
  static const ::scene_format::LightDirectional& directional(const Light* msg);
  static const ::scene_format::LightSphere& sphere(const Light* msg);
  static const ::scene_format::LightEnvironment& environment(const Light* msg);
};

const ::scene_format::Transform&
Light::_Internal::transform(const Light* msg) {
  return *msg->transform_;
}
const ::scene_format::Color&
Light::_Internal::color(const Light* msg) {
  return *msg->color_;
}
const ::scene_format::LightPoint&
Light::_Internal::point(const Light* msg) {
  return *msg->light_.point_;
}
const ::scene_format::LightDirectional&
Light::_Internal::directional(const Light* msg) {
  return *msg->light_.directional_;
}
const ::scene_format::LightSphere&
Light::_Internal::sphere(const Light* msg) {
  return *msg->light_.sphere_;
}
const ::scene_format::LightEnvironment&
Light::_Internal::environment(const Light* msg) {
  return *msg->light_.environment_;
}
void Light::set_allocated_point(::scene_format::LightPoint* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_light();
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
    light_.point_ = point;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Light.point)
}
void Light::set_allocated_directional(::scene_format::LightDirectional* directional) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_light();
  if (directional) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(directional);
    if (message_arena != submessage_arena) {
      directional = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directional, submessage_arena);
    }
    set_has_directional();
    light_.directional_ = directional;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Light.directional)
}
void Light::set_allocated_sphere(::scene_format::LightSphere* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_light();
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sphere);
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    light_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Light.sphere)
}
void Light::set_allocated_environment(::scene_format::LightEnvironment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_light();
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    set_has_environment();
    light_.environment_ = environment;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Light.environment)
}
Light::Light(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Light)
}
Light::Light(const Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::scene_format::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::scene_format::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  id_ = from.id_;
  clear_has_light();
  switch (from.light_case()) {
    case kPoint: {
      _internal_mutable_point()->::scene_format::LightPoint::MergeFrom(from._internal_point());
      break;
    }
    case kDirectional: {
      _internal_mutable_directional()->::scene_format::LightDirectional::MergeFrom(from._internal_directional());
      break;
    }
    case kSphere: {
      _internal_mutable_sphere()->::scene_format::LightSphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kEnvironment: {
      _internal_mutable_environment()->::scene_format::LightEnvironment::MergeFrom(from._internal_environment());
      break;
    }
    case LIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.Light)
}

void Light::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(id_));
clear_has_light();
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:scene_format.Light)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Light::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete color_;
  if (has_light()) {
    clear_light();
  }
}

void Light::ArenaDtor(void* object) {
  Light* _this = reinterpret_cast< Light* >(object);
  (void)_this;
}
void Light::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Light::clear_light() {
// @@protoc_insertion_point(one_of_clear_start:scene_format.Light)
  switch (light_case()) {
    case kPoint: {
      if (GetArena() == nullptr) {
        delete light_.point_;
      }
      break;
    }
    case kDirectional: {
      if (GetArena() == nullptr) {
        delete light_.directional_;
      }
      break;
    }
    case kSphere: {
      if (GetArena() == nullptr) {
        delete light_.sphere_;
      }
      break;
    }
    case kEnvironment: {
      if (GetArena() == nullptr) {
        delete light_.environment_;
      }
      break;
    }
    case LIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIGHT_NOT_SET;
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  id_ = 0;
  clear_light();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Light::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Color color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.LightPoint point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.LightDirectional directional = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_directional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.LightSphere sphere = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.LightEnvironment environment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Light::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .scene_format.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  // .scene_format.Color color = 4;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::color(this), target, stream);
  }

  // .scene_format.LightPoint point = 5;
  if (_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::point(this), target, stream);
  }

  // .scene_format.LightDirectional directional = 6;
  if (_internal_has_directional()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::directional(this), target, stream);
  }

  // .scene_format.LightSphere sphere = 7;
  if (_internal_has_sphere()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sphere(this), target, stream);
  }

  // .scene_format.LightEnvironment environment = 8;
  if (_internal_has_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::environment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Light)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .scene_format.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .scene_format.Color color = 4;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  switch (light_case()) {
    // .scene_format.LightPoint point = 5;
    case kPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_.point_);
      break;
    }
    // .scene_format.LightDirectional directional = 6;
    case kDirectional: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_.directional_);
      break;
    }
    // .scene_format.LightSphere sphere = 7;
    case kSphere: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_.sphere_);
      break;
    }
    // .scene_format.LightEnvironment environment = 8;
    case kEnvironment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_.environment_);
      break;
    }
    case LIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Light>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Light)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::scene_format::Transform::MergeFrom(from._internal_transform());
  }
  if (from.has_color()) {
    _internal_mutable_color()->::scene_format::Color::MergeFrom(from._internal_color());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.light_case()) {
    case kPoint: {
      _internal_mutable_point()->::scene_format::LightPoint::MergeFrom(from._internal_point());
      break;
    }
    case kDirectional: {
      _internal_mutable_directional()->::scene_format::LightDirectional::MergeFrom(from._internal_directional());
      break;
    }
    case kSphere: {
      _internal_mutable_sphere()->::scene_format::LightSphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kEnvironment: {
      _internal_mutable_environment()->::scene_format::LightEnvironment::MergeFrom(from._internal_environment());
      break;
    }
    case LIGHT_NOT_SET: {
      break;
    }
  }
}

void Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::InternalSwap(Light* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Light, id_)
      + sizeof(Light::id_)
      - PROTOBUF_FIELD_OFFSET(Light, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
  swap(light_, other->light_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Light::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerspectiveCamera::_Internal {
 public:
};

PerspectiveCamera::PerspectiveCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.PerspectiveCamera)
}
PerspectiveCamera::PerspectiveCamera(const PerspectiveCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fov_ = from.fov_;
  // @@protoc_insertion_point(copy_constructor:scene_format.PerspectiveCamera)
}

void PerspectiveCamera::SharedCtor() {
fov_ = 0;
}

PerspectiveCamera::~PerspectiveCamera() {
  // @@protoc_insertion_point(destructor:scene_format.PerspectiveCamera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerspectiveCamera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PerspectiveCamera::ArenaDtor(void* object) {
  PerspectiveCamera* _this = reinterpret_cast< PerspectiveCamera* >(object);
  (void)_this;
}
void PerspectiveCamera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerspectiveCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerspectiveCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.PerspectiveCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fov_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerspectiveCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double fov = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerspectiveCamera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.PerspectiveCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fov = 1;
  if (!(this->fov() <= 0 && this->fov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_fov(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.PerspectiveCamera)
  return target;
}

size_t PerspectiveCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.PerspectiveCamera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double fov = 1;
  if (!(this->fov() <= 0 && this->fov() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerspectiveCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.PerspectiveCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const PerspectiveCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerspectiveCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.PerspectiveCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.PerspectiveCamera)
    MergeFrom(*source);
  }
}

void PerspectiveCamera::MergeFrom(const PerspectiveCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.PerspectiveCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fov() <= 0 && from.fov() >= 0)) {
    _internal_set_fov(from._internal_fov());
  }
}

void PerspectiveCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.PerspectiveCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerspectiveCamera::CopyFrom(const PerspectiveCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.PerspectiveCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerspectiveCamera::IsInitialized() const {
  return true;
}

void PerspectiveCamera::InternalSwap(PerspectiveCamera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fov_, other->fov_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerspectiveCamera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrthographicCamera::_Internal {
 public:
};

OrthographicCamera::OrthographicCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.OrthographicCamera)
}
OrthographicCamera::OrthographicCamera(const OrthographicCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:scene_format.OrthographicCamera)
}

void OrthographicCamera::SharedCtor() {
}

OrthographicCamera::~OrthographicCamera() {
  // @@protoc_insertion_point(destructor:scene_format.OrthographicCamera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrthographicCamera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrthographicCamera::ArenaDtor(void* object) {
  OrthographicCamera* _this = reinterpret_cast< OrthographicCamera* >(object);
  (void)_this;
}
void OrthographicCamera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrthographicCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrthographicCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.OrthographicCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrthographicCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrthographicCamera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.OrthographicCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.OrthographicCamera)
  return target;
}

size_t OrthographicCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.OrthographicCamera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrthographicCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.OrthographicCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const OrthographicCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrthographicCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.OrthographicCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.OrthographicCamera)
    MergeFrom(*source);
  }
}

void OrthographicCamera::MergeFrom(const OrthographicCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.OrthographicCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OrthographicCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.OrthographicCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrthographicCamera::CopyFrom(const OrthographicCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.OrthographicCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrthographicCamera::IsInitialized() const {
  return true;
}

void OrthographicCamera::InternalSwap(OrthographicCamera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrthographicCamera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Camera::_Internal {
 public:
  static const ::scene_format::Transform& transform(const Camera* msg);
  static const ::scene_format::PerspectiveCamera& perspective(const Camera* msg);
  static const ::scene_format::OrthographicCamera& orthographic(const Camera* msg);
};

const ::scene_format::Transform&
Camera::_Internal::transform(const Camera* msg) {
  return *msg->transform_;
}
const ::scene_format::PerspectiveCamera&
Camera::_Internal::perspective(const Camera* msg) {
  return *msg->camera_.perspective_;
}
const ::scene_format::OrthographicCamera&
Camera::_Internal::orthographic(const Camera* msg) {
  return *msg->camera_.orthographic_;
}
void Camera::set_allocated_perspective(::scene_format::PerspectiveCamera* perspective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_camera();
  if (perspective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(perspective);
    if (message_arena != submessage_arena) {
      perspective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perspective, submessage_arena);
    }
    set_has_perspective();
    camera_.perspective_ = perspective;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Camera.perspective)
}
void Camera::set_allocated_orthographic(::scene_format::OrthographicCamera* orthographic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_camera();
  if (orthographic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orthographic);
    if (message_arena != submessage_arena) {
      orthographic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orthographic, submessage_arena);
    }
    set_has_orthographic();
    camera_.orthographic_ = orthographic;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Camera.orthographic)
}
Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::scene_format::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  id_ = from.id_;
  clear_has_camera();
  switch (from.camera_case()) {
    case kPerspective: {
      _internal_mutable_perspective()->::scene_format::PerspectiveCamera::MergeFrom(from._internal_perspective());
      break;
    }
    case kOrthographic: {
      _internal_mutable_orthographic()->::scene_format::OrthographicCamera::MergeFrom(from._internal_orthographic());
      break;
    }
    case CAMERA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.Camera)
}

void Camera::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(id_));
clear_has_camera();
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:scene_format.Camera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
  if (has_camera()) {
    clear_camera();
  }
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Camera::clear_camera() {
// @@protoc_insertion_point(one_of_clear_start:scene_format.Camera)
  switch (camera_case()) {
    case kPerspective: {
      if (GetArena() == nullptr) {
        delete camera_.perspective_;
      }
      break;
    }
    case kOrthographic: {
      if (GetArena() == nullptr) {
        delete camera_.orthographic_;
      }
      break;
    }
    case CAMERA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CAMERA_NOT_SET;
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  id_ = 0;
  clear_camera();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.PerspectiveCamera perspective = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_perspective(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.OrthographicCamera orthographic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orthographic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .scene_format.Transform transform = 2;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  // .scene_format.PerspectiveCamera perspective = 3;
  if (_internal_has_perspective()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::perspective(this), target, stream);
  }

  // .scene_format.OrthographicCamera orthographic = 4;
  if (_internal_has_orthographic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::orthographic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .scene_format.Transform transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  switch (camera_case()) {
    // .scene_format.PerspectiveCamera perspective = 3;
    case kPerspective: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_.perspective_);
      break;
    }
    // .scene_format.OrthographicCamera orthographic = 4;
    case kOrthographic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_.orthographic_);
      break;
    }
    case CAMERA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Camera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::scene_format::Transform::MergeFrom(from._internal_transform());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.camera_case()) {
    case kPerspective: {
      _internal_mutable_perspective()->::scene_format::PerspectiveCamera::MergeFrom(from._internal_perspective());
      break;
    }
    case kOrthographic: {
      _internal_mutable_orthographic()->::scene_format::OrthographicCamera::MergeFrom(from._internal_orthographic());
      break;
    }
    case CAMERA_NOT_SET: {
      break;
    }
  }
}

void Camera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera, id_)
      + sizeof(Camera::id_)
      - PROTOBUF_FIELD_OFFSET(Camera, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
  swap(camera_, other->camera_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Material::_Internal {
 public:
  static const ::scene_format::LambertReflectionMaterial& lambert_reflection(const Material* msg);
  static const ::scene_format::SpecularReflectionMaterial& specular_reflection(const Material* msg);
};

const ::scene_format::LambertReflectionMaterial&
Material::_Internal::lambert_reflection(const Material* msg) {
  return *msg->material_.lambert_reflection_;
}
const ::scene_format::SpecularReflectionMaterial&
Material::_Internal::specular_reflection(const Material* msg) {
  return *msg->material_.specular_reflection_;
}
void Material::set_allocated_lambert_reflection(::scene_format::LambertReflectionMaterial* lambert_reflection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_material();
  if (lambert_reflection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lambert_reflection);
    if (message_arena != submessage_arena) {
      lambert_reflection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lambert_reflection, submessage_arena);
    }
    set_has_lambert_reflection();
    material_.lambert_reflection_ = lambert_reflection;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Material.lambert_reflection)
}
void Material::set_allocated_specular_reflection(::scene_format::SpecularReflectionMaterial* specular_reflection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_material();
  if (specular_reflection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specular_reflection);
    if (message_arena != submessage_arena) {
      specular_reflection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specular_reflection, submessage_arena);
    }
    set_has_specular_reflection();
    material_.specular_reflection_ = specular_reflection;
  }
  // @@protoc_insertion_point(field_set_allocated:scene_format.Material.specular_reflection)
}
Material::Material(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.Material)
}
Material::Material(const Material& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  clear_has_material();
  switch (from.material_case()) {
    case kLambertReflection: {
      _internal_mutable_lambert_reflection()->::scene_format::LambertReflectionMaterial::MergeFrom(from._internal_lambert_reflection());
      break;
    }
    case kSpecularReflection: {
      _internal_mutable_specular_reflection()->::scene_format::SpecularReflectionMaterial::MergeFrom(from._internal_specular_reflection());
      break;
    }
    case MATERIAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.Material)
}

void Material::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_material();
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:scene_format.Material)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Material::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_material()) {
    clear_material();
  }
}

void Material::ArenaDtor(void* object) {
  Material* _this = reinterpret_cast< Material* >(object);
  (void)_this;
}
void Material::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Material::clear_material() {
// @@protoc_insertion_point(one_of_clear_start:scene_format.Material)
  switch (material_case()) {
    case kLambertReflection: {
      if (GetArena() == nullptr) {
        delete material_.lambert_reflection_;
      }
      break;
    }
    case kSpecularReflection: {
      if (GetArena() == nullptr) {
        delete material_.specular_reflection_;
      }
      break;
    }
    case MATERIAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATERIAL_NOT_SET;
}


void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  clear_material();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Material::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "scene_format.Material.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.LambertReflectionMaterial lambert_reflection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lambert_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .scene_format.SpecularReflectionMaterial specular_reflection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Material::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "scene_format.Material.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .scene_format.LambertReflectionMaterial lambert_reflection = 2;
  if (_internal_has_lambert_reflection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lambert_reflection(this), target, stream);
  }

  // .scene_format.SpecularReflectionMaterial specular_reflection = 3;
  if (_internal_has_specular_reflection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::specular_reflection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.Material)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (material_case()) {
    // .scene_format.LambertReflectionMaterial lambert_reflection = 2;
    case kLambertReflection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *material_.lambert_reflection_);
      break;
    }
    // .scene_format.SpecularReflectionMaterial specular_reflection = 3;
    case kSpecularReflection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *material_.specular_reflection_);
      break;
    }
    case MATERIAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Material>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.Material)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.material_case()) {
    case kLambertReflection: {
      _internal_mutable_lambert_reflection()->::scene_format::LambertReflectionMaterial::MergeFrom(from._internal_lambert_reflection());
      break;
    }
    case kSpecularReflection: {
      _internal_mutable_specular_reflection()->::scene_format::SpecularReflectionMaterial::MergeFrom(from._internal_specular_reflection());
      break;
    }
    case MATERIAL_NOT_SET: {
      break;
    }
  }
}

void Material::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  return true;
}

void Material::InternalSwap(Material* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(material_, other->material_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Material::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LambertReflectionMaterial::_Internal {
 public:
  static const ::scene_format::Color& color(const LambertReflectionMaterial* msg);
};

const ::scene_format::Color&
LambertReflectionMaterial::_Internal::color(const LambertReflectionMaterial* msg) {
  return *msg->color_;
}
LambertReflectionMaterial::LambertReflectionMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.LambertReflectionMaterial)
}
LambertReflectionMaterial::LambertReflectionMaterial(const LambertReflectionMaterial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::scene_format::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.LambertReflectionMaterial)
}

void LambertReflectionMaterial::SharedCtor() {
color_ = nullptr;
}

LambertReflectionMaterial::~LambertReflectionMaterial() {
  // @@protoc_insertion_point(destructor:scene_format.LambertReflectionMaterial)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LambertReflectionMaterial::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void LambertReflectionMaterial::ArenaDtor(void* object) {
  LambertReflectionMaterial* _this = reinterpret_cast< LambertReflectionMaterial* >(object);
  (void)_this;
}
void LambertReflectionMaterial::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LambertReflectionMaterial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LambertReflectionMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.LambertReflectionMaterial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LambertReflectionMaterial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .scene_format.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LambertReflectionMaterial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.LambertReflectionMaterial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .scene_format.Color color = 1;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.LambertReflectionMaterial)
  return target;
}

size_t LambertReflectionMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.LambertReflectionMaterial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .scene_format.Color color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LambertReflectionMaterial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.LambertReflectionMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  const LambertReflectionMaterial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LambertReflectionMaterial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.LambertReflectionMaterial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.LambertReflectionMaterial)
    MergeFrom(*source);
  }
}

void LambertReflectionMaterial::MergeFrom(const LambertReflectionMaterial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.LambertReflectionMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    _internal_mutable_color()->::scene_format::Color::MergeFrom(from._internal_color());
  }
}

void LambertReflectionMaterial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.LambertReflectionMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LambertReflectionMaterial::CopyFrom(const LambertReflectionMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.LambertReflectionMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LambertReflectionMaterial::IsInitialized() const {
  return true;
}

void LambertReflectionMaterial::InternalSwap(LambertReflectionMaterial* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LambertReflectionMaterial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpecularReflectionMaterial::_Internal {
 public:
};

SpecularReflectionMaterial::SpecularReflectionMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.SpecularReflectionMaterial)
}
SpecularReflectionMaterial::SpecularReflectionMaterial(const SpecularReflectionMaterial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eta_ = from.eta_;
  // @@protoc_insertion_point(copy_constructor:scene_format.SpecularReflectionMaterial)
}

void SpecularReflectionMaterial::SharedCtor() {
eta_ = 0;
}

SpecularReflectionMaterial::~SpecularReflectionMaterial() {
  // @@protoc_insertion_point(destructor:scene_format.SpecularReflectionMaterial)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecularReflectionMaterial::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecularReflectionMaterial::ArenaDtor(void* object) {
  SpecularReflectionMaterial* _this = reinterpret_cast< SpecularReflectionMaterial* >(object);
  (void)_this;
}
void SpecularReflectionMaterial::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecularReflectionMaterial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecularReflectionMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.SpecularReflectionMaterial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eta_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecularReflectionMaterial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double eta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          eta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecularReflectionMaterial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.SpecularReflectionMaterial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double eta = 1;
  if (!(this->eta() <= 0 && this->eta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_eta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.SpecularReflectionMaterial)
  return target;
}

size_t SpecularReflectionMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.SpecularReflectionMaterial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double eta = 1;
  if (!(this->eta() <= 0 && this->eta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecularReflectionMaterial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.SpecularReflectionMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecularReflectionMaterial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecularReflectionMaterial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.SpecularReflectionMaterial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.SpecularReflectionMaterial)
    MergeFrom(*source);
  }
}

void SpecularReflectionMaterial::MergeFrom(const SpecularReflectionMaterial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.SpecularReflectionMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.eta() <= 0 && from.eta() >= 0)) {
    _internal_set_eta(from._internal_eta());
  }
}

void SpecularReflectionMaterial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.SpecularReflectionMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecularReflectionMaterial::CopyFrom(const SpecularReflectionMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.SpecularReflectionMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecularReflectionMaterial::IsInitialized() const {
  return true;
}

void SpecularReflectionMaterial::InternalSwap(SpecularReflectionMaterial* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(eta_, other->eta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecularReflectionMaterial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomProperty::_Internal {
 public:
};

CustomProperty::CustomProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scene_format.CustomProperty)
}
CustomProperty::CustomProperty(const CustomProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kTextValue: {
      _internal_set_text_value(from._internal_text_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:scene_format.CustomProperty)
}

void CustomProperty::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_value();
}

CustomProperty::~CustomProperty() {
  // @@protoc_insertion_point(destructor:scene_format.CustomProperty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void CustomProperty::ArenaDtor(void* object) {
  CustomProperty* _this = reinterpret_cast< CustomProperty* >(object);
  (void)_this;
}
void CustomProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomProperty::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:scene_format.CustomProperty)
  switch (value_case()) {
    case kTextValue: {
      value_.text_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void CustomProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:scene_format.CustomProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "scene_format.CustomProperty.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "scene_format.CustomProperty.text_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene_format.CustomProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "scene_format.CustomProperty.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string text_value = 2;
  if (_internal_has_text_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_value().data(), static_cast<int>(this->_internal_text_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "scene_format.CustomProperty.text_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_value(), target);
  }

  // int32 int32_value = 3;
  if (_internal_has_int32_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene_format.CustomProperty)
  return target;
}

size_t CustomProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scene_format.CustomProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  switch (value_case()) {
    // string text_value = 2;
    case kTextValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_value());
      break;
    }
    // int32 int32_value = 3;
    case kInt32Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene_format.CustomProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene_format.CustomProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene_format.CustomProperty)
    MergeFrom(*source);
  }
}

void CustomProperty::MergeFrom(const CustomProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene_format.CustomProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  switch (from.value_case()) {
    case kTextValue: {
      _internal_set_text_value(from._internal_text_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void CustomProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene_format.CustomProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomProperty::CopyFrom(const CustomProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene_format.CustomProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomProperty::IsInitialized() const {
  return true;
}

void CustomProperty::InternalSwap(CustomProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace scene_format
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::scene_format::Scene* Arena::CreateMaybeMessage< ::scene_format::Scene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Scene >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Vector3* Arena::CreateMaybeMessage< ::scene_format::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Color* Arena::CreateMaybeMessage< ::scene_format::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Transform* Arena::CreateMaybeMessage< ::scene_format::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::RenderOptions* Arena::CreateMaybeMessage< ::scene_format::RenderOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::RenderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Cube* Arena::CreateMaybeMessage< ::scene_format::Cube >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Cube >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Sphere* Arena::CreateMaybeMessage< ::scene_format::Sphere >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Sphere >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Plane* Arena::CreateMaybeMessage< ::scene_format::Plane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Plane >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Disk* Arena::CreateMaybeMessage< ::scene_format::Disk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Disk >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::MeshedObject* Arena::CreateMaybeMessage< ::scene_format::MeshedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::MeshedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::SceneObject* Arena::CreateMaybeMessage< ::scene_format::SceneObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::SceneObject >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::LightDirectional* Arena::CreateMaybeMessage< ::scene_format::LightDirectional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::LightDirectional >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::LightPoint* Arena::CreateMaybeMessage< ::scene_format::LightPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::LightPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::LightEnvironment* Arena::CreateMaybeMessage< ::scene_format::LightEnvironment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::LightEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::LightSphere* Arena::CreateMaybeMessage< ::scene_format::LightSphere >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::LightSphere >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Light* Arena::CreateMaybeMessage< ::scene_format::Light >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Light >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::PerspectiveCamera* Arena::CreateMaybeMessage< ::scene_format::PerspectiveCamera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::PerspectiveCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::OrthographicCamera* Arena::CreateMaybeMessage< ::scene_format::OrthographicCamera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::OrthographicCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Camera* Arena::CreateMaybeMessage< ::scene_format::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::Material* Arena::CreateMaybeMessage< ::scene_format::Material >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::Material >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::LambertReflectionMaterial* Arena::CreateMaybeMessage< ::scene_format::LambertReflectionMaterial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::LambertReflectionMaterial >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::SpecularReflectionMaterial* Arena::CreateMaybeMessage< ::scene_format::SpecularReflectionMaterial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::SpecularReflectionMaterial >(arena);
}
template<> PROTOBUF_NOINLINE ::scene_format::CustomProperty* Arena::CreateMaybeMessage< ::scene_format::CustomProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scene_format::CustomProperty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
